//ajax地址，参数Id数组，格式化字符串Id，需要填充的Id
//如需绑定数据序列号formatHTML中可使用{index}
function SimplePage(url, formatId, appendId) {
    var obj = new Object();
    var eventDefFlag = false; //默认事件首次绑定
    var strPageFormartHTML = ""; //当前页面需要格式化的HTML代码
    var ContaierNode = getJqueryNode(appendId);
    ContaierNode.hide();
    var strFormartContent = "";//格式化数据内容结构 
    if (formatId.indexOf("#") == 0) {
        strFormartContent = $("#" + formatId).html(); //formatNode.html("");
    } else strFormartContent = formatId;

    //if ($("#" + formatId).length > 0) { strFormartContent = $("#" + formatId).html(); $("#" + formatId).html(""); }
    //else strFormartContent = formatId;

    //第一次加载
    var isFirstLoad = true;

    obj.PageIndex = 1; //当前页
    obj.PageSize = 10; //每页显示量
    obj.PageAccountCount = 0; //总记录数
    obj.PageCount = 0; //总页数

    obj.PageModel = true; //是否不执行分页直接读取全部数据  Ture：分页模式 【如果关闭分页模式则自动将条件中的数据全部读取出来 慎用！】

    obj.PageHTML = "<style>.page{border-bottom:solid 1px #E7E6EB;text-align:right;font-family:\"Microsoft Yahei\",宋体;font-size:14px;padding:10px;}.page span{float:right;line-height:31px;margin-left:10px;}.page .input_button{float:right;width:79px;height:31px;border:1px solid #E7E6EB;background:#FFF;letter-spacing:.5em;text-indent:.5em;cursor:pointer;}.page .input_text{float:right;width:50px;height:31px;border:1px solid #E7E6EB;text-align:center;margin:0 10px;}.page .img_left,.page .img_right{float:right;width:79px;line-height: 30px;height:31px;border:1px solid #E7E6EB;text-align: center;margin:0 10px;background:url(/images/arrow-right.png);cursor:pointer;display:none;}.page .img_left{background:url(/images/arrow-left.png);}</style><div class=\"page clearfix\" style=\"\"><input type=\"button\" class=\"input_button page-Goto\" value=\"跳转\" id=\"btnNum\" style=\"cursor: pointer\"><input type=\"text\" class=\"input_text page-numberVal\" id=\"numText\"><div id=\"btnNext\" class=\"img_right page-next\" style=\"display: block;\"> 下一页 </div><div id=\"btnPre\" class=\"img_left page-prev\" style=\"display: block;\"> 上一页 </div><span id=\"spanPage\" class=\"page-formart\">{pageIndex}/{pageCount}</span></div>";
    obj.PageNodeAuto = true;//自动加入分页节点

    obj.PageContainerId = "#NetPage_" + ContaierNode.prop("id"); //分页节点Id {pageIndex}{pageCount}{pageSize}
    if ($("#NetPage").length > 0) {
        obj.PageContainerId = "#NetPage";
    }
    obj.PageFormartNode = ".page-formart"; //动态显示的信息的HTML节点 
    obj.PageInputNumberNode = ".page-numberVal"; //页数输入框


    obj.PageNumberShowNode = ".PageNumber"; //数字分页形式
    obj.PageNumbersShowNode = {
        Current: "<span class=\"numbers current\">{index}</span>",
        Numbers: "<a class=\"numbers\" href=\"{url}\"  data-role=\"numbers\" data-val=\"{index}\">{index}</a>",
        Ellipsis: "<span class=\"numbers\">…</span>"
    }; //数字分页形式默认当前项


    obj.PageGotoNode = ".page-Goto"; //默认跳转页面按钮
    obj.PagePrevNode = ".page-prev"; //上一页
    obj.PageNextNode = ".page-next"; //下一页 
    obj.PageNumberNode = ".page-number"; //当前需要跳转的页面节点 默认节点中含有page-val（第几页）属性


    obj.Params = null; //参数 [格式：aa=1&bb=2] 注意：obj.PageIsLink为true的情况下 此参数只能取页面初始时的默认值 不能根据链接传递
    obj.ParamsIds = null; //固定参数Id [格式："id1,id2,id3"]
    obj.SubmitNodes = null; //提交按钮 Id [格式："id1,id2,id3"]
    obj.NoDataShow = "暂无数据"; //如果当前没有数据则默认绑定该信息 

    obj.HasHeader = false; //是否保留头部
    obj.PageAsync = false; //是否异步 默认首次绑定数据 true：首次执行分页不加载数据
    obj.PageIsLink = false; //是否跳转链接形式加载分页
    obj.PageAlwaysShow = false; //是否一直显示 false：当页面小于一页时自动隐藏分页控件
    obj.PageAnimate = false; //是否执行动画式分页效果
    obj.PageAnimateMethod = "scroll";

    var doFilterResult = null;
    obj.FilterResult = function (Func) {
        doFilterResult = Func;
    }
    obj.FilterData = function (Func) {
        doFilter = Func;
    };  //过滤数据方法 前台调用 NetPage.FilterData(function (JsonData) {  你的处理 });
    doFilter = function (ListData) {
    }; //过滤数据


    obj.PageLoadReady = function (Func) {
        doLoadReady = Func;
    }; //分页绑定数据完成后执行方法
    doLoadReady = function (ListData) {
    }; //分页之后需要执行的方法
    obj.DoLastSetting = function () {//分页最后执行方法
        if (obj.ParamsIds.length > 0) {
            var firstNode = $("#" + obj.ParamsIds[0]);
            if (firstNode.val() != "" && firstNode.val() != null) {
                $("#" + obj.ParamsIds[0]).focus();
            }
        }
    };

    //.page-prev 上一页 .page-next 下一页 .page-number  具体页【需要绑定page-val属性】
    //.page-Goto 跳转按钮 .page-numberVal 分页输入框
    //.page-formart 动态显示参数化 例如：<span>第{pageIndex}页/共{pageCount}页|页长{pageSize}条</span>
    //分页方法


    obj.DoLoadPage = function () {
        if (isFirstLoad) {
            init();
        }
        if (!eventDefFlag) {
            eventDefFlag = true;
            binderDefEvent();
            binderPageEvent();
            if (obj.PageAsync) {
                return;
            }
        }
        var strUrl = url + (url.indexOf("?") == -1 ? "?" : "&") + "rad=" + Math.random();
        var JsonData = $.parseJSON("{" + getParamsArray().join(",") + "}");
        KD.doAjax({
            type: "GET",
            url: strUrl,
            data: JsonData,
            error: function () {
                $("" + obj.PageContainerId).remove();
                ContaierNode.show();
                ContaierNode.find("#noDataDiv").remove();
                if (obj.HasHeader) {
                    ContaierNode.append("<div id='noDataDiv'>数据加载失败！</div>"); //绑定数据 
                } else {
                    ContaierNode.html("<div id='noDataDiv'>数据加载失败！</div>"); //绑定数据 
                }
            },
            success: function (data) {
                try {
                    ContaierNode.find("#noDataDiv").remove();

                    var result = data;

                    if (doFilterResult != null) {
                        result = doFilterResult(result);
                    }

                    if (KD.isNull(result.data)) result.data = [];
                    var JsonData = result.data;
                    obj.PageCount = parseInt(result.pageCount); //总页数   
                    if (JsonData.length > 0) {
                        doFilter(JsonData); //过滤数据
                    }
                    var strResult = KD.Json.binderJson(JsonData, strFormartContent);
                    if (obj.HasHeader) {
                        ContaierNode.children().eq(0).nextAll().remove();
                    } else {
                        ContaierNode.children().remove();
                    }
                    if (JsonData.length > 0) {
                        ContaierNode.append(strResult); //绑定数据 
                        if (!isFirstLoad || parseInt(KD.getQuery("page")) > 0) {
                            if (obj.PageAnimate) {
                                AnimationGoto(obj.PageAnimateMethod);
                            }
                        }
                    } else {
                        ContaierNode.append("<div id='noDataDiv'>" + obj.NoDataShow + "</div>"); //绑定数据  
                    }
                    ContaierNode.show();
                    obj.formartHTML(); //格式化动态参数
                    //分页执行完成后调用方法
                    //if (JsonData.length > 0) {
                    doLoadReady(JsonData); //加载完成后执行的方法
                    //}
                    DoLastSetting();
                } catch (e) {
                    // alert("数据读取错误，请刷新后重试！");
                }
            }
        });

    }
    function AnimationGoto(strAnimate) {

        switch (strAnimate) {
            case "scroll":
                $("html,body").animate({scrollTop: ContaierNode.offset().top - 200}, "slow");
                break;
            case "goto":
                location.href = "#" + ContaierNode.prop("id");
                break;
            case "none":
                location.href = "#";
                break;
            default:

        }
    }

    //格式化动态参数
    obj.formartHTML = function () {
        try {
            try {
                var strHTML;
                if (KD.isNull(strPageFormartHTML)) {
                    strPageFormartHTML = $(obj.PageContainerId).find(obj.PageFormartNode).html();
                }
                strHTML = strPageFormartHTML;
                if (!KD.isNull(strHTML)) {
                    if (obj.PageIndex > parseInt(obj.PageCount)) {
                        obj.PageIndex = parseInt(obj.PageCount);
                    }
                    strHTML = KD.replaceStrAll(strHTML, "{pageIndex}", obj.PageIndex);
                    strHTML = KD.replaceStrAll(strHTML, "{pageCount}", obj.PageCount);
                    strHTML = KD.replaceStrAll(strHTML, "{pageSize}", obj.PageSize);
                    $(obj.PageContainerId).find(obj.PageFormartNode).html(strHTML);
                }
            } catch (e) {
            }
            try {
                $(obj.PageContainerId).find(obj.PageInputNumberNode).val(obj.PageIndex);
            } catch (e) {
            }
            if (obj.PageAlwaysShow) {
                $(obj.PageContainerId).find(obj.PagePrevNode).show();
                $(obj.PageContainerId).find(obj.PageNextNode).show();
                $("" + obj.PageContainerId).show();
            } else {
                if (obj.PageCount <= 1) {
                    $("" + obj.PageContainerId).hide();
                } else {
                    $("" + obj.PageContainerId).show();
                    //隐藏上一页下一页按钮
                    if (obj.PageIndex == 1) {
                        $(obj.PageContainerId).find(obj.PagePrevNode).hide();
                    } else {
                        $(obj.PageContainerId).find(obj.PagePrevNode).show();
                    }
                    if (obj.PageIndex == obj.PageCount) {
                        $(obj.PageContainerId).find(obj.PageNextNode).hide();
                    } else {
                        $(obj.PageContainerId).find(obj.PageNextNode).show();
                    }
                }

            }
            try {
                BindPageNumbers();
            } catch (e) {
            }
            function BindPageNumbers() {
                if ($(obj.PageContainerId).find(obj.PageNumberShowNode).length <= 0) return;
                var defShowLength = 5;
                var showLast = false;
                var showFirst = false;
                var leftNumber = (defShowLength - 1) / 2;
                var rightNumber = (defShowLength - 1) / 2;
                var defNumber = leftNumber;
                //加载中间页面项
                if (obj.PageIndex - leftNumber <= 0) {
                    leftNumber = obj.PageIndex - 1;
                }
                if ((obj.PageIndex + defNumber) >= obj.PageCount) {
                    rightNumber = obj.PageCount - obj.PageIndex;
                }

                var strPageHTML = new Array();

                //加载第1页
                if ((obj.PageIndex - leftNumber) > 1) {
                    strPageHTML.push(KD.Json.jsonToAnalytical(obj.PageNumbersShowNode.Numbers, {
                        index: 1,
                        url: replaceUrl(getLinkParams("page:" + 1))
                    }));

                }
                //加载第2页
                if ((obj.PageIndex - leftNumber) > 2) {

                    strPageHTML.push(KD.Json.jsonToAnalytical(obj.PageNumbersShowNode.Numbers, {
                        index: 2,
                        url: replaceUrl(getLinkParams("page:" + 2))
                    }));

                    //  是否显示首省略号
                    if ((obj.PageIndex - leftNumber) > 3) {
                        strPageHTML.push(obj.PageNumbersShowNode.Ellipsis);
                    }
                }

                //加载左侧页数
                var curPageLeftIndex = obj.PageIndex;
                var strLeftHTML = "";
                for (var i = 0; i < leftNumber; i++) {
                    curPageLeftIndex--;
                    strLeftHTML = KD.Json.jsonToAnalytical(obj.PageNumbersShowNode.Numbers, {
                            index: curPageLeftIndex,
                            url: replaceUrl(getLinkParams("page:" + curPageLeftIndex))
                        }) + strLeftHTML;

                }
                strPageHTML.push(strLeftHTML);
                //选中页面
                strPageHTML.push(KD.Json.jsonToAnalytical(obj.PageNumbersShowNode.Current, {
                    index: obj.PageIndex,
                    url: replaceUrl(getLinkParams("page:" + obj.PageIndex))
                }));
                //加载右侧页数
                var curPageRightIndex = obj.PageIndex;
                for (var i = 0; i < rightNumber; i++) {
                    curPageRightIndex++;
                    strPageHTML.push(KD.Json.jsonToAnalytical(obj.PageNumbersShowNode.Numbers, {
                        index: curPageRightIndex,
                        url: replaceUrl(getLinkParams("page:" + curPageRightIndex))
                    }));

                }
                var strLastHTML = "";
                var strEllipsis = "";
                //加载倒数第二页
                if ((obj.pageCount - (obj.PageIndex + rightNumber)) >= 2) {
                    strLastHTML += KD.Json.jsonToAnalytical(obj.PageNumbersShowNode.Numbers, {
                        index: obj.pageCount - 1,
                        url: replaceUrl(getLinkParams("page:" + (obj.pageCount - 1)))
                    });

                    if ((obj.pageCount - (obj.PageIndex + rightNumber)) >= 3) {
                        strEllipsis = obj.PageNumbersShowNode.Ellipsis;
                    }
                }
                //加载最后一页
                if ((obj.pageCount - (obj.PageIndex + rightNumber)) >= 1) {
                    strLastHTML += KD.Json.jsonToAnalytical(obj.PageNumbersShowNode.Numbers, {
                        index: obj.pageCount,
                        url: replaceUrl(getLinkParams("page:" + obj.pageCount))
                    });
                }
                strPageHTML.push(strEllipsis + strLastHTML);

                $(obj.PageContainerId).find(obj.PageNumberShowNode).html(strPageHTML.join(""));

            }

            function replaceUrl(strArray) {
                if (obj.PageIsLink) {
                    return KD.Url.setQueryUrl(strArray);
                } else {
                    return "#";
                }
            }
        } catch (e) {

        }
    }
    function getJqueryNode(str) {
        try {
            if (!isJqueryNode(str)) {
                return $("#" + str);
            } else {
                return $(str);
            }
        } catch (e) {
            return $("dddddddaaaaaaaaaa");
        }
    }

    //判断是否是Jquery选择器
    function isJqueryNode(str) {
        try {
            if ($(str).length > 0) {
                return true;
            }
            return false;
        } catch (e) {
            return false;
        }
    }

    //获取链接分页参数
    function getLinkParams(pageParam) {
        if (obj.PageIsLink) {
            var curArray = getParamsArray(true);
            if (pageParam == null) {
                curArray.push("page" + ":" + obj.PageIndex);
            } else {
                curArray.push(pageParam);
            }
            return curArray;
        }
        return new Array();
    }

    //获取参数数组
    function getParamsArray(flag) {
        var strArray = new Array();
        var linkChar = "";
        if (flag == null) {
            linkChar = "\"";
            //参数
            if (typeof (obj.Params) == typeof ("")) {
                obj.Params = obj.Params.split("&");
            }
            if (!KD.isNull(obj.Params)) {
                for (var i = 0; i < obj.Params.length; i++) {
                    var curStrArray = obj.Params[i].split("=");
                    strArray.push("" + linkChar + "" + curStrArray[0] + "" + linkChar + "" + ":" + linkChar + "" + curStrArray[1] + "" + linkChar + "");
                }
            }
        }
        //参数IDs
        if (typeof (obj.ParamsIds) == typeof ("")) {
            obj.ParamsIds = obj.ParamsIds.split(",");
        }
        if (!KD.isNull(obj.ParamsIds)) {

            for (var i = 0; i < obj.ParamsIds.length; i++) {
                if (!KD.isNull($("#" + obj.ParamsIds[i]))) {
                    var curVal = $("#" + obj.ParamsIds[i]).val();
                    if (!KD.isNull(curVal))
                        strArray.push("" + linkChar + "" + obj.ParamsIds[i] + "" + linkChar + "" + ":" + linkChar + "" + $("#" + obj.ParamsIds[i]).val() + "" + linkChar + "");
                }
            }

        }
        if (flag == null) {
            //分页模式
            if (!obj.PageModel) {
                strArray.push("" + linkChar + "PageModel" + linkChar + ":" + linkChar + "1" + linkChar + "");
            }
            strArray.push("" + linkChar + "PageIndex" + linkChar + ":" + linkChar + "" + obj.PageIndex + "" + linkChar + "");
            strArray.push("" + linkChar + "PageSize" + linkChar + ":" + linkChar + "" + obj.PageSize + "" + linkChar + "");
        }
        return strArray;
    }

    //获取值为空的对象
    function getNullParamIds() {
        var strArray = new Array();
        if (!KD.isNull(obj.ParamsIds)) {
            for (var i = 0; i < obj.ParamsIds.length; i++) {
                if (!KD.isNull($("#" + obj.ParamsIds[i]))) {
                    var curVal = $("#" + obj.ParamsIds[i]).val();
                    if (KD.isNull(curVal))  strArray.push(obj.ParamsIds[i]);
                }
            }
        }
        return strArray;
    }

    //绑定默认事件
    function binderDefEvent() {
        if (!KD.isNull(obj.SubmitNodes)) {
            //绑定提交方法
            var StrArray = obj.SubmitNodes.split(",");
            for (var i = 0; i < StrArray.length; i++) {
                if (!KD.isNull(StrArray[i])) {
                    if (KD.Form.isJqueryNode(StrArray[i])) {
                        $(StrArray[i]).click(function () {
                            obj.PageIndex = 1;
                            if (obj.PageIsLink) {
                                location.href = KD.Url.setAndDelQueryUrl(getLinkParams(), getNullParamIds());
                            } else {
                                obj.DoLoadPage();
                            }
                            return false;
                        });
                    } else {
                        $("#" + StrArray[i]).click(function () {
                            obj.PageIndex = 1;
                            if (obj.PageIsLink) {
                                location.href = KD.Url.setAndDelQueryUrl(getLinkParams(), getNullParamIds());
                            } else {
                                obj.DoLoadPage();
                            }
                            return false;
                        });
                    }
                    if (i == 0) {
                        //设置默认回车事件
                        KD.Global.setEnterBtn(StrArray[i]);
                    }
                }
            }
        }
    }

    function initPageHTML() {
        if (obj.PageNodeAuto) {//默认加入分页
            $("" + obj.PageContainerId).remove();
            var tagName = ContaierNode.attr("tagName");
            if (KD.isNull(tagName)) tagName = ContaierNode.prop("tagName");
            var nodeParent = ContaierNode.parent();
            switch (tagName.toLowerCase()) {
                case "tbody":
                    nodeParent = ContaierNode.parents("table");
                    break;
            }
            nodeParent.after("<div id=\"" + obj.PageContainerId.replace("#", "") + "\">" + obj.PageHTML + "</div>");
        } else {
            $("" + obj.PageContainerId).hide();
            var str = $("" + obj.PageContainerId).html() + "";
            if (KD.isNull(str.trim())) $("" + obj.PageContainerId).html(obj.PageHTML);
        }
    }

    //绑定分页点击事件
    function binderPageEvent() {
        initPageHTML();
        if (!KD.isNull($(obj.PageContainerId).find(obj.PageGotoNode)) && !KD.isNull($(obj.PageContainerId).find(obj.PageInputNumberNode))) {
            //跳转按钮
            $(obj.PageContainerId).find(obj.PageGotoNode).click(function () {
                var curVal = parseInt($(obj.PageInputNumberNode).val());
                if (!isNaN(curVal) && curVal > 0) {
                    if (curVal > obj.pageCount) {
                        obj.PageIndex = parseInt(obj.pageCount);
                        $(obj.PageContainerId).find(obj.PageInputNumberNode).val(obj.pageCount);
                        $(obj.PageContainerId).find(obj.PageInputNumberNode).select();
                        doPage();
                    }
                    else {
                        obj.PageIndex = parseInt(curVal);
                        doPage();
                    }
                } else {
                    alert("您输入的分页数字格式不正确！");
                    $(obj.PageContainerId).find(obj.PageInputNumberNode).select();
                }
                return !obj.PageAnimate;
            });
        }
        if (!KD.isNull($(obj.PageContainerId).find(obj.PagePrevNode))) {
            //上一页
            $(obj.PageContainerId).find(obj.PagePrevNode).click(function () {
                obj.PageIndex--;
                if (obj.PageIndex < 1) {
                    obj.PageIndex++;
                    alert("没有上一页了！");
                    return false;
                }
                doPage();
                return !obj.PageAnimate;
            });
        }
        if (!KD.isNull($(obj.PageContainerId).find(obj.PageNextNode))) {
            //下一页
            $(obj.PageContainerId).find(obj.PageNextNode).click(function () {
                obj.PageIndex++;
                if (obj.pageNumber > obj.pageCount) {
                    obj.pageNumber--;
                    alert("没有下一页了！");
                    return false;
                }
                doPage();
                return !obj.PageAnimate;
            });
        }
        if (!KD.isNull($(obj.PageContainerId).find(obj.PageNumberNode))) {
            //具体点击页
            $(obj.PageContainerId).find(obj.PageNumberNode).click(function () {
                var curVal = parseInt($(this).attr("page-val"));
                if (isNaN(curVal)) {
                    alert("参数错误！");
                    return false;
                }
                obj.pageNumber = parseInt(curVal);
                doPage();
                return !obj.PageAnimate;
            });
        }
        if ($(obj.PageContainerId).find(obj.PageNumberShowNode).length > 0) {
            if (!obj.PageIsLink) {
                $(document).on("click", $(obj.PageContainerId).prop("id") + " " + obj.PageNumberShowNode + " [data-role='numbers']", function () {
                    var curIndex = parseInt($(this).attr("data-val"));
                    if (isNaN(curIndex)) {
                        alert("分页数不是一个有效的数字！");
                        return false;
                    }
                    obj.pageNumber = curIndex;
                    doPage();
                    return !obj.PageAnimate;
                });
            }
        }
    }

    //执行分页后执行的方法
    function doPage() {
        isFirstLoad = false;
        if (obj.PageIsLink) {
            location.href = KD.Url.setQueryUrl(getLinkParams());
        } else {
            obj.DoLoadPage();
        }
        if (typeof (readyFuncShow) == typeof (function () {
            })) {
            readyFuncShow();
        }
    }

    //分页执行完毕之后执行的操作
    function DoLastSetting() {
        obj.DoLastSetting();
    }

    //入口函数
    function init() {
        var curPageIndex = KD.getQuery("page");
        if (!KD.isNull(curPageIndex)) {
            obj.pageNumber = parseInt(curPageIndex);
            //参数IDs
            if (typeof (obj.ParamsIds) == typeof ("")) {
                obj.ParamsIds = obj.ParamsIds.split(",");
            }
            if (!KD.isNull(obj.ParamsIds)) {
                for (var i = 0; i < obj.ParamsIds.length; i++) {
                    var curVal = decodeURI(KD.getQuery(obj.ParamsIds[i]));
                    if (!KD.isNull(curVal)) {
                        try {
                            $("#" + obj.ParamsIds[i]).val(curVal);
                        } catch (e) {
                        }
                    }
                }
            }
        }
    }

    init();
    return obj;
}
var readyFuncShow;
/*#Demo

 */